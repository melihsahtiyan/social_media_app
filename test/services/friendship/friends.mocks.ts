import mongoose from 'mongoose';
import { User } from '../../../src/models/entities/User';

const invalidUserMocks = {
	unverifiedUserMock: new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId'),
		firstName: 'John',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'john.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: false, emailVerification: false },
		profilePhotoUrl: 'mockedProfilePhotoUrl',
		friends: [],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
};

const nonFriendUserMocks = [
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId'),
		firstName: 'John',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'john.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId1'),
		firstName: 'Jane',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'jane.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
];

const alreadyFriendUserMocks = [
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId'),
		firstName: 'John',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'john.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [new mongoose.Schema.Types.ObjectId('mockId1')],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId1'),
		firstName: 'Jane',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'jane.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [new mongoose.Schema.Types.ObjectId('mockId')],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
];

const alreadyRequestedUserMocks = [
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId'),
		firstName: 'John',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'john.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [],
		friendRequests: [{ userId: new mongoose.Schema.Types.ObjectId('mockId1'), createdAt: new Date(Date.now()) }],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
	new User({
		_id: new mongoose.Schema.Types.ObjectId('mockId1'),
		firstName: 'Jane',
		lastName: 'Doe',
		birthDate: new Date(),
		email: 'jane.doe@example.com',
		password: 'password123',
		university: 'Mocked University',
		department: 'Mocked Department',
		studentEmail: 'john.doe@student.example.com',
		status: { studentVerification: true, emailVerification: true },
		profilePhotoUrl: null,
		friends: [],
		friendRequests: [],
		posts: [],
		organizations: [],
		attendances: [],
		createdAt: new Date(),
	}),
];

export const friendMocks = {
    invalidUserMocks,
	alreadyRequestedUserMocks,
    alreadyFriendUserMocks,
    nonFriendUserMocks,
};
